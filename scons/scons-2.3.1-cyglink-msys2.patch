diff -Naur a/engine/SCons/Node/FS.py b/engine/SCons/Node/FS.py
--- a/engine/SCons/Node/FS.py	2013-03-03 18:48:39.000000000 +0400
+++ b/engine/SCons/Node/FS.py	2013-07-25 23:37:33.856445300 +0400
@@ -364,7 +364,7 @@
     return DefaultRCSBuilder
 
 # Cygwin's os.path.normcase pretends it's on a case-sensitive filesystem.
-_is_cygwin = sys.platform == "cygwin"
+_is_cygwin = sys.platform in ["cygwin", "msys"]
 if os.path.normcase("TeSt") == os.path.normpath("TeSt") and not _is_cygwin:
     def _my_normcase(x):
         return x
diff -Naur a/engine/SCons/Platform/__init__.py b/engine/SCons/Platform/__init__.py
--- a/engine/SCons/Platform/__init__.py	2013-03-03 18:48:39.000000000 +0400
+++ b/engine/SCons/Platform/__init__.py	2013-07-25 23:38:42.231445300 +0400
@@ -68,6 +68,8 @@
     if osname == 'posix':
         if sys.platform == 'cygwin':
             return 'cygwin'
+        elif sys.platform == 'msys':
+            return 'msys'
         elif sys.platform.find('irix') != -1:
             return 'irix'
         elif sys.platform.find('sunos') != -1:
diff -Naur a/engine/SCons/Platform/msys.py b/engine/SCons/Platform/msys.py
--- a/engine/SCons/Platform/msys.py	1970-01-01 03:00:00.000000000 +0300
+++ b/engine/SCons/Platform/msys.py	2013-07-25 23:45:27.056640600 +0400
@@ -0,0 +1,59 @@
+"""SCons.Platform.msys
+
+Platform-specific initialization for MSYS systems.
+
+There normally shouldn't be any need to import this module directly.  It
+will usually be imported through the generic SCons.Platform.Platform()
+selection method.
+"""
+
+#
+# Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 The SCons Foundation
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
+# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
+# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+__revision__ = "src/engine/SCons/Platform/cygwin.py  2014/03/02 14:18:15 garyo"
+
+import posix
+from SCons.Platform import TempFileMunge
+
+def generate(env):
+    posix.generate(env)
+
+    # /bin/gcc doesn't work on Cygwin because gcc attempts to
+    # find libexec as /bin/../libexec. So prefer /usr/bin instead.
+    env['ENV']['PATH']    = '/usr/local/bin:/opt/bin:/usr/bin:/bin'
+    env['PROGPREFIX']  = ''
+    env['PROGSUFFIX']  = '.exe'
+    env['SHLIBPREFIX'] = ''
+    env['SHLIBSUFFIX'] = '.dll'
+    env['LIBPREFIXES'] = [ '$LIBPREFIX', '$SHLIBPREFIX' ]
+    env['LIBSUFFIXES'] = [ '$LIBSUFFIX', '$SHLIBSUFFIX' ]
+    env['TEMPFILE']    = TempFileMunge
+    env['TEMPFILEPREFIX'] = '@'
+    env['MAXLINELENGTH']  = 2048
+
+# Local Variables:
+# tab-width:4
+# indent-tabs-mode:nil
+# End:
+# vim: set expandtab tabstop=4 shiftwidth=4:
+
diff -Naur a/engine/SCons/Script/Main.py b/engine/SCons/Script/Main.py
--- a/engine/SCons/Script/Main.py	2013-03-03 18:48:39.000000000 +0400
+++ b/engine/SCons/Script/Main.py	2013-07-25 23:39:22.528320300 +0400
@@ -755,7 +755,7 @@
     def homedir(d):
         return os.path.expanduser('~/'+d)
 
-    if platform == 'win32' or platform == 'cygwin':
+    if platform == 'win32' or platform == 'cygwin' or platform == 'msys':
         # Note we use $ here instead of %...% because older
         # pythons (prior to 2.6?) didn't expand %...% on Windows.
         # This set of dirs should work on XP, Vista, 7 and later.
diff -Naur a/engine/SCons/Tool/__init__.py b/engine/SCons/Tool/__init__.py
--- a/engine/SCons/Tool/__init__.py	2013-03-03 18:48:39.000000000 +0400
+++ b/engine/SCons/Tool/__init__.py	2013-07-25 23:49:27.673828100 +0400
@@ -309,7 +309,7 @@
                 shlink_flags += [ '-Wl,-soname=%s' % soname ]
                 if Verbose:
                     print " soname ",soname,", shlink_flags ",shlink_flags
-        elif platform == 'cygwin':
+        elif platform in ['cygwin', 'msys']:
             shlink_flags += [ '-Wl,-Bsymbolic',
                               '-Wl,--out-implib,${TARGET.base}.a' ]
         elif platform == 'darwin':
@@ -763,6 +763,14 @@
         assemblers = ['gas', 'nasm', 'masm']
         fortran_compilers = ['gfortran', 'g77', 'ifort', 'ifl', 'f95', 'f90', 'f77']
         ars = ['ar', 'mslib']
+    elif str(platform) == 'msys':
+        "prefer GNU tools on MSYS, except for a platform-specific linker"
+        linkers = ['msyslink', 'mslink', 'ilink']
+        c_compilers = ['gcc', 'msvc', 'intelc', 'icc', 'cc']
+        cxx_compilers = ['g++', 'msvc', 'intelc', 'icc', 'c++']
+        assemblers = ['gas', 'nasm', 'masm']
+        fortran_compilers = ['gfortran', 'g77', 'ifort', 'ifl', 'f95', 'f90', 'f77']
+        ars = ['ar', 'mslib']
     else:
         "prefer GNU tools on all other platforms"
         linkers = ['gnulink', 'mslink', 'ilink']
diff -Naur a/engine/SCons/Tool/g77.py b/engine/SCons/Tool/g77.py
--- a/engine/SCons/Tool/g77.py	2013-03-03 18:48:40.000000000 +0400
+++ b/engine/SCons/Tool/g77.py	2013-07-25 23:39:42.200195300 +0400
@@ -44,7 +44,7 @@
     add_f77_to_env(env)
 
     fcomp = env.Detect(compilers) or 'g77'
-    if env['PLATFORM'] in ['cygwin', 'win32']:
+    if env['PLATFORM'] in ['cygwin', 'msys', 'win32']:
         env['SHFORTRANFLAGS'] = SCons.Util.CLVar('$FORTRANFLAGS')
         env['SHF77FLAGS'] = SCons.Util.CLVar('$F77FLAGS')
     else:
diff -Naur a/engine/SCons/Tool/gcc.py b/engine/SCons/Tool/gcc.py
--- a/engine/SCons/Tool/gcc.py	2013-03-03 18:48:40.000000000 +0400
+++ b/engine/SCons/Tool/gcc.py	2013-07-25 23:40:01.637695300 +0400
@@ -47,7 +47,7 @@
     cc.generate(env)
 
     env['CC'] = env.Detect(compilers) or 'gcc'
-    if env['PLATFORM'] in ['cygwin', 'win32']:
+    if env['PLATFORM'] in ['cygwin', 'msys', 'win32']:
         env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS')
     else:
         env['SHCCFLAGS'] = SCons.Util.CLVar('$CCFLAGS -fPIC')
diff -Naur a/engine/SCons/Tool/gfortran.py b/engine/SCons/Tool/gfortran.py
--- a/engine/SCons/Tool/gfortran.py	2013-03-03 18:48:40.000000000 +0400
+++ b/engine/SCons/Tool/gfortran.py	2013-07-25 23:40:17.715820300 +0400
@@ -46,7 +46,7 @@
     for dialect in ['F77', 'F90', 'FORTRAN', 'F95', 'F03']:
         env['%s' % dialect] = 'gfortran'
         env['SH%s' % dialect] = '$%s' % dialect
-        if env['PLATFORM'] in ['cygwin', 'win32']:
+        if env['PLATFORM'] in ['cygwin', 'msys', 'win32']:
             env['SH%sFLAGS' % dialect] = SCons.Util.CLVar('$%sFLAGS' % dialect)
         else:
             env['SH%sFLAGS' % dialect] = SCons.Util.CLVar('$%sFLAGS -fPIC' % dialect)
diff -Naur a/engine/SCons/Tool/hpc++.py b/engine/SCons/Tool/hpc++.py
--- a/engine/SCons/Tool/hpc++.py	2013-03-03 18:48:40.000000000 +0400
+++ b/engine/SCons/Tool/hpc++.py	2013-07-25 23:41:16.731445300 +0400
@@ -69,7 +69,7 @@
         if line.find('aCC: HP ANSI C++') == 0:
             env['CXXVERSION'] = line.split()[-1]
 
-        if env['PLATFORM'] == 'cygwin':
+        if env['PLATFORM'] == 'cygwin' or env['PLATFORM'] == 'msys':
             env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS')
         else:
             env['SHCXXFLAGS'] = SCons.Util.CLVar('$CXXFLAGS +Z')
diff -Naur a/engine/SCons/Tool/msyslink.py b/engine/SCons/Tool/msyslink.py
--- a/engine/SCons/Tool/msyslink.py	1970-01-01 03:00:00.000000000 +0300
+++ b/engine/SCons/Tool/msyslink.py	2013-07-25 23:49:10.017578100 +0400
@@ -0,0 +1,95 @@
+"""SCons.Tool.msyslink
+
+Customization of gnulink for MSYS
+
+There normally shouldn't be any need to import this module directly.
+It will usually be imported through the generic SCons.Tool.Tool()
+selection method.
+
+"""
+
+import SCons.Action
+import SCons.Util
+
+import gnulink
+
+def shlib_generator(target, source, env, for_signature):
+    cmd = SCons.Util.CLVar(['$SHLINK']) 
+
+    dll = env.FindIxes(target, 'SHLIBPREFIX', 'SHLIBSUFFIX')
+    if dll: cmd.extend(['-o', dll])
+
+    cmd.extend(['$SHLINKFLAGS', '$__RPATH'])
+
+    implib = env.FindIxes(target, 'IMPLIBPREFIX', 'IMPLIBSUFFIX')
+    if implib:
+        cmd.extend([
+            '-Wl,--out-implib='+implib.get_string(for_signature),
+            '-Wl,--export-all-symbols',
+            '-Wl,--enable-auto-import',
+            '-Wl,--whole-archive', '$SOURCES',
+            '-Wl,--no-whole-archive', '$_LIBDIRFLAGS', '$_LIBFLAGS'
+            ])
+    
+    else:
+        cmd.extend(['$SOURCES', '$_LIBDIRFLAGS', '$_LIBFLAGS'])
+    return [cmd]
+
+def shlib_emitter(target, source, env):
+    dll = env.FindIxes(target, 'SHLIBPREFIX', 'SHLIBSUFFIX')
+    no_import_lib = env.get('no_import_lib', 0)
+
+    if not dll or len(target) > 1:
+        raise SCons.Errors.UserError("A shared library should have exactly one target with the suffix: %s" % env.subst("$SHLIBSUFFIX"))
+    
+    # Remove any "lib" after the prefix
+    pre = env.subst('$SHLIBPREFIX')
+    if dll.name[len(pre):len(pre)+3] == 'lib':
+        dll.name = pre + dll.name[len(pre)+3:]
+
+    orig_target = target
+    target = [env.fs.File(dll)]
+    target[0].attributes.shared = 1
+
+    # Append an import lib target
+    if not no_import_lib:
+        # Create list of target libraries as strings
+        target_strings = env.ReplaceIxes(orig_target[0],
+                                         'SHLIBPREFIX', 'SHLIBSUFFIX',
+                                         'IMPLIBPREFIX', 'IMPLIBSUFFIX')
+        
+        implib_target = env.fs.File(target_strings)
+        implib_target.attributes.shared = 1
+        target.append(implib_target)
+
+    return (target, source)
+                         
+
+shlib_action = SCons.Action.Action(shlib_generator, generator=1)
+
+def generate(env):
+    """Add Builders and construction variables for msyslink to an Environment."""
+    gnulink.generate(env)
+
+    env['LINKFLAGS']   = SCons.Util.CLVar('-Wl,-no-undefined')
+
+    env['SHLINKCOM'] = shlib_action
+    env['LDMODULECOM'] = shlib_action
+    env.Append(SHLIBEMITTER = [shlib_emitter])
+
+    env['SHLIBPREFIX']        = 'msys-'
+    env['SHLIBSUFFIX']        = '.dll'
+
+    env['IMPLIBPREFIX']        = 'lib'
+    env['IMPLIBSUFFIX']        = '.dll.a'
+
+def exists(env):
+    return gnulink.exists(env)
+
+
+# Local Variables:
+# tab-width:4
+# indent-tabs-mode:nil
+# End:
+# vim: set expandtab tabstop=4 shiftwidth=4:
+
diff --git a/engine/SCons/Tool/link.py b/engine/SCons/Tool/link.py
index 008a7d7..173f091 100644
--- a/engine/SCons/Tool/link.py
+++ b/engine/SCons/Tool/link.py
@@ -127,7 +127,7 @@ def shlib_emitter_names(target, source, env):
                     print "shlib_emitter_names: side effect: ", name
                 # add version_name to list of names to be a Side effect
                 version_names.append(version_name)
-            elif platform == 'cygwin':
+            elif platform in ['cygwin', 'msys']:
                 shlib_suffix = env.subst('$SHLIBSUFFIX')
                 name = target[0].name
                 # generate library name with the version number
diff -Naur a/engine/SCons/Util.py b/engine/SCons/Util.py
--- a/engine/SCons/Util.py	2013-03-03 18:48:40.000000000 +0400
+++ b/engine/SCons/Util.py	2013-07-25 23:36:54.231445300 +0400
@@ -889,7 +889,7 @@
     else:
         return sep.join(paths)
 
-if sys.platform == 'cygwin':
+if sys.platform in ['cygwin', 'msys']:
     def get_native_path(path):
         """Transforms an absolute path into a native path for the system.  In
         Cygwin, this converts from a Cygwin path to a Windows one."""
@@ -1020,7 +1020,7 @@
                     return None
 
 
-if sys.platform == 'cygwin':
+if sys.platform in ['cygwin', 'msys']:
     # On Cygwin, os.path.normcase() lies, so just report back the
     # fact that the underlying Windows OS is case-insensitive.
     def case_sensitive_suffixes(s1, s2):
diff -Naur a/MANIFEST b/MANIFEST
--- a/MANIFEST	2013-03-03 18:48:41.000000000 +0400
+++ b/MANIFEST	2013-07-25 23:52:35.781250000 +0400
@@ -31,6 +31,7 @@
 engine/SCons/Platform/darwin.py
 engine/SCons/Platform/hpux.py
 engine/SCons/Platform/irix.py
+engine/SCons/Platform/msys.py
 engine/SCons/Platform/os2.py
 engine/SCons/Platform/posix.py
 engine/SCons/Platform/sunos.py
@@ -83,6 +84,7 @@
 engine/SCons/Tool/bcc32.py
 engine/SCons/Tool/c++.py
 engine/SCons/Tool/cc.py
+engine/SCons/Tool/cyglink.py
 engine/SCons/Tool/cvf.py
 engine/SCons/Tool/default.py
 engine/SCons/Tool/dmd.py
@@ -134,6 +136,7 @@
 engine/SCons/Tool/mssdk.py
 engine/SCons/Tool/msvc.py
 engine/SCons/Tool/msvs.py
+engine/SCons/Tool/msyslink.py
 engine/SCons/Tool/mwcc.py
 engine/SCons/Tool/mwld.py
 engine/SCons/Tool/nasm.py
